@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using Tamaris.Web.Components.Profile
@using Tamaris.Web.Services
@using Tamaris.Web.Services.DataService

@implements IDisposable
@implements IAsyncDisposable

@inject HubConnection HubConnection
@inject NavigationManager Navigation
@inject IAccountDataService AccountService
@inject CustomStateProvider AuthenticationStateProvider
@inject IMessagesDataService MessagesDataService

<link href="css/user-profile.css" rel="stylesheet" />

<AuthorizeView>
    <Authorized>
        <button class="nav-link btn btn-link" @onclick="OpenProfile">@context.User.Identity?.Name</button>

        <button class="btn btn-outline-info position-relative" @onclick="OpenMessages">
            <i class="fa fa-envelope"></i>
            @if(CountUnread > 0)
            {
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">@CountUnread</span>
            }
        </button>

        <button class="nav-link btn btn-link ms-2" @onclick="BeginSignOut">
            <i class="fas fa-power-off"></i>
        </button>
    </Authorized>
    <NotAuthorized>
        <a href="account/login">Sign in</a>
        <a href="account/register">Register</a>
    </NotAuthorized>
</AuthorizeView>

<UserProfileCard @ref="FormUserProfileDialog"></UserProfileCard>



@code {
    protected UserProfileCard FormUserProfileDialog { get; set; }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await AccountService.Logout();
        Navigation.NavigateTo("/", true);
    }

    private async Task OpenProfile(MouseEventArgs args)
    {
        FormUserProfileDialog.Show();
    }

    private async Task OpenMessages(MouseEventArgs args)
    {
        Navigation.NavigateTo("/messages", false);
    }

    #region Updating the count of unread messages
    int CountUnread = 0;

    private async Task<int> GetCountUnreadAsync()
    {
        var email = await GetUserEmailAsync();
        var count = (await MessagesDataService.GetUnreadCountByEmailAsync(email));
        return count;
    }

    public void Dispose()
    {
        HubConnection.Remove("UnreadCountAll");
    }

    async Task<string> GetUserEmailAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity!.Name!;
    }

    #endregion Updating the count of unread messages


    #region SignalR support
    protected override async Task OnInitializedAsync()
    {
        CountUnread = await GetCountUnreadAsync();
        var email = await GetUserEmailAsync();

        // TODO: error handling, for example when not connected to the server
        await HubConnection.InvokeAsync("JoinCountUnread", email);
 
        HubConnection.On<string>("MessageSentToMe", async senderEmail =>
        {
            this.CountUnread = await GetCountUnreadAsync();
            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        var email = await GetUserEmailAsync();

        HubConnection.Remove("MessageSentToMe");

        // TODO: error handling, for example when not connected to the server
        if(!string.IsNullOrEmpty(email))
            await HubConnection.InvokeAsync("LeaveCountUnread", email);
    }
    #endregion SignalR support
}

