@page "/account/resetpassword/{Email}/{*Token}"

@using Tamaris.Domains.Authorization
@using Tamaris.Web.Services
@using Blazored.Modal

@attribute [AllowAnonymous]

@layout AuthenticationLayout
@inject NavigationManager navigationManager
@inject IAccountService authenticationService
@inject IDialogService dialogService


<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="resetPasswordRequest">
    <DataAnnotationsValidator />

    <div class="main-form">
        <div class="text-center">
            <div class="form-signin">
                <img class="mb-4" src="/images/tamaris_logo.png" alt="" width="72" height="57">
                <h1 class="h3 mb-3 fw-normal">Changing password for @Email</h1>

                <div class="form-floating">
                    <input type="password" class="form-control textbox-top" id="inputPassword" placeholder="Password" @bind="resetPasswordRequest.Password" />
                    <label for="inputPassword">Password:</label>
                    <ValidationMessage For="@(() => resetPasswordRequest.Password)" />
                </div>

                <div class="form-floating">
                    <input type="password" class="form-control textbox-bottom" id="inputPasswordConfirm" placeholder="Password confirm" @bind="resetPasswordRequest.PasswordConfirm" />
                    <label for="inputPasswordConfirm">Password confirm:</label>
                    <ValidationMessage For="@(() => resetPasswordRequest.PasswordConfirm)" />
                </div>


                <div class="checkbox mb-3">
                    <a href="/account/login">Click here to login</a>
                </div>
                <button class="w-100 btn btn-lg btn-primary" type="submit">Set password</button>

                <label class="text-danger mt-3">@error</label>

                <p class="mt-5 mb-3 text-muted">&copy; 2021 by Flower Power Inc.</p>
            </div>
        </div>
    </div>

</EditForm>

@code
{
    [Parameter]
    public string Token { get; set; }

    [Parameter]
    public string Email { get; set; }


    ResetPasswordRequest resetPasswordRequest { get; set; } = new ResetPasswordRequest();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            resetPasswordRequest.Email = Email;
            resetPasswordRequest.Token = Token;

            var errors = await authenticationService.ResetPassword(resetPasswordRequest);

            if (!string.IsNullOrEmpty(errors))
            {
                error = errors;
            }
            else
            {
                await dialogService.ShowMessage(Modal, "Password successfully changed");
                navigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }


    [CascadingParameter]
    public IModalService Modal { get; set; }
}